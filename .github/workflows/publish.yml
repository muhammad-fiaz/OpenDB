name: Publish to crates.io

on:
  release:
    types: [created]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  # Build artifacts for all platforms
  build-artifacts:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: opendb-linux-x86_64.tar.gz
            
          # Linux aarch64 (ARM64)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: opendb-linux-aarch64.tar.gz
            
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            name: opendb-macos-x86_64.tar.gz
            
          # macOS aarch64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: opendb-macos-aarch64.tar.gz
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: opendb-windows-x86_64.zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm
    
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm -y
        # Ensure clang is in PATH
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }} --all-features
      timeout-minutes: 15
      env:
        CC: ${{ runner.os == 'Linux' && 'clang' || runner.os == 'macOS' && 'clang' || '' }}
        CXX: ${{ runner.os == 'Linux' && 'clang++' || runner.os == 'macOS' && 'clang++' || '' }}
        CARGO_INCREMENTAL: 0
        RUST_BACKTRACE: 1
    
    - name: Package artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.name }} \
          libopendb.* \
          *.rlib \
          examples/* \
          || true
        cd ../../..
    
    - name: Package artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }} `
          opendb.lib `
          opendb.dll `
          *.rlib `
          examples/*.exe `
          -r
        cd ../../..
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}
        retention-days: 1

  # Publish to crates.io (runs after successful build)
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-artifacts
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm
    
    - name: Verify package
      run: cargo package --all-features
      timeout-minutes: 5
      env:
        CC: clang
        CXX: clang++
        CARGO_INCREMENTAL: 0
        RUST_BACKTRACE: 1
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      timeout-minutes: 5
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        CC: clang
        CXX: clang++
        CARGO_INCREMENTAL: 0
        RUST_BACKTRACE: 1
  
  # Upload artifacts to GitHub Release
  upload-release:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs: [build-artifacts, publish]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display structure
      run: ls -R ./artifacts
    
    - name: Upload Linux x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/opendb-linux-x86_64.tar.gz/opendb-linux-x86_64.tar.gz
        asset_name: opendb-linux-x86_64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/opendb-linux-aarch64.tar.gz/opendb-linux-aarch64.tar.gz
        asset_name: opendb-linux-aarch64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload macOS x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/opendb-macos-x86_64.tar.gz/opendb-macos-x86_64.tar.gz
        asset_name: opendb-macos-x86_64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/opendb-macos-aarch64.tar.gz/opendb-macos-aarch64.tar.gz
        asset_name: opendb-macos-aarch64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/opendb-windows-x86_64.zip/opendb-windows-x86_64.zip
        asset_name: opendb-windows-x86_64.zip
        asset_content_type: application/zip
    
    - name: 📝 Extract version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    - name: 📋 Generate Release Notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🎉 OpenDB v${{ steps.get_version.outputs.VERSION }}
        
        A high-performance hybrid embedded database in pure Rust with KV, records, graph, vector, and multimodal support.
        
        ### 📦 Installation
        
        **Option 1: Using Cargo (Recommended)**
        
        Add OpenDB to your `Cargo.toml`:
        
        ```toml
        [dependencies]
        opendb = "${{ steps.get_version.outputs.VERSION }}"
        ```
        
        Or install via cargo:
        
        ```bash
        cargo add opendb
        ```
        
        **Option 2: Manual Installation from GitHub Artifacts**
        
        Download the pre-built binaries for your platform from the Assets section below:
        
        **Linux x86_64:**
        ```bash
        # Download and extract
        wget https://github.com/muhammad-fiaz/opendb/releases/download/v${{ steps.get_version.outputs.VERSION }}/opendb-linux-x86_64.tar.gz
        tar -xzf opendb-linux-x86_64.tar.gz
        
        # Install system-wide (requires sudo)
        sudo cp libopendb.so /usr/local/lib/
        sudo ldconfig
        
        # Or copy to your project
        cp libopendb.* /path/to/your/project/lib/
        ```
        
        **Linux ARM64:**
        ```bash
        wget https://github.com/muhammad-fiaz/opendb/releases/download/v${{ steps.get_version.outputs.VERSION }}/opendb-linux-aarch64.tar.gz
        tar -xzf opendb-linux-aarch64.tar.gz
        sudo cp libopendb.so /usr/local/lib/
        sudo ldconfig
        ```
        
        **macOS x86_64 (Intel):**
        ```bash
        curl -L https://github.com/muhammad-fiaz/opendb/releases/download/v${{ steps.get_version.outputs.VERSION }}/opendb-macos-x86_64.tar.gz -o opendb-macos-x86_64.tar.gz
        tar -xzf opendb-macos-x86_64.tar.gz
        sudo cp libopendb.dylib /usr/local/lib/
        ```
        
        **macOS ARM64 (Apple Silicon):**
        ```bash
        curl -L https://github.com/muhammad-fiaz/opendb/releases/download/v${{ steps.get_version.outputs.VERSION }}/opendb-macos-aarch64.tar.gz -o opendb-macos-aarch64.tar.gz
        tar -xzf opendb-macos-aarch64.tar.gz
        sudo cp libopendb.dylib /usr/local/lib/
        ```
        
        **Windows x86_64:**
        ```powershell
        # Download and extract
        Invoke-WebRequest -Uri "https://github.com/muhammad-fiaz/opendb/releases/download/v${{ steps.get_version.outputs.VERSION }}/opendb-windows-x86_64.zip" -OutFile "opendb-windows-x86_64.zip"
        Expand-Archive -Path opendb-windows-x86_64.zip -DestinationPath .
        
        # Copy to your project or system path
        Copy-Item opendb.dll C:\Windows\System32\
        # Or add to your project directory
        ```
        
        **Build Requirements for RocksDB:**
        
        If building from source, ensure you have the required dependencies:
        
        - **Clang and LLVM**: Required for building RocksDB bindings
        - **Linux**: `sudo apt-get install clang llvm`
        - **macOS**: `brew install llvm`
        - **Windows**: `choco install llvm`
        
        For Alpine Linux (musl), use bindgen-static feature:
        ```toml
        [dependencies.opendb]
        default-features = false
        features = ["bindgen-static"]
        ```
        
        **Option 3: Build from Source**
        
        ```bash
        git clone https://github.com/muhammad-fiaz/opendb.git
        cd opendb
        cargo build --release --all-features
        ```
        
        ### ✨ Features
        
        - **Key-Value Store**: Fast point lookups and scans
        - **Structured Records**: Document/row storage with schema
        - **Graph Database**: Relationships and traversals
        - **Vector Database**: Semantic search with k-NN
        - **Multimodal Support**: PDF, DOCX, audio, video, text processing
        - **In-Memory Cache**: LRU cache for hot data
        - **ACID Transactions**: Full transactional guarantees
        - **Customizable Storage**: Configure database location
        
        ### 🚀 Quick Start
        
        ```rust
        use opendb::{OpenDB, Memory, OpenDBOptions, Result};
        
        fn main() -> Result<()> {
            // Open database with custom options
            let options = OpenDBOptions::with_dimension(384)
                .with_storage_path("./my_custom_db");
            let db = OpenDB::open_with_options("./my_db", options)?;
        
            // Create and store a memory
            let memory = Memory::new(
                "memory_1",
                "Rust is a systems programming language",
                vec![0.1, 0.2, 0.3],
                0.8,
            );
            db.insert_memory(&memory)?;
        
            // Vector search
            let similar = db.search_similar(&[0.1, 0.2, 0.3], 5)?;
            
            Ok(())
        }
        ```
        
        ### 📚 Documentation
        
        - **Docs**: https://muhammad-fiaz.github.io/opendb
        - **Repository**: https://github.com/muhammad-fiaz/opendb
        - **Examples**: Check the `examples/` directory
        
        ### 🧪 Test Results
        
        All test suites passing:
        - ✅ Unit tests
        - ✅ ACID transaction tests
        - ✅ Integration tests
        - ✅ Documentation tests
        
        ### 🤝 Contributing
        
        Contributions are welcome! Please see our [Contributing Guide](https://github.com/muhammad-fiaz/opendb/blob/main/CONTRIBUTING.md).
        
        ### 📄 License
        
        Apache-2.0
        
        ---
        
        For issues or questions, visit: https://github.com/muhammad-fiaz/opendb/issues
        EOF
        
        cat release_notes.md
    
    - name: 🏷️ Update Release Notes
      if: github.event_name == 'release'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });
          
          console.log('✅ Release notes updated successfully!');
