name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Install RocksDB dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev clang
    
    - name: Install RocksDB dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install rocksdb llvm
    
    - name: Install RocksDB dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # RocksDB will be built from source via rust-rocksdb
        echo "RocksDB will be built from source"
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: ðŸ“Š Run All Tests with Detailed Output
      run: |
        echo "::group::ðŸ§ª Running Unit Tests"
        cargo test --lib --verbose --all-features -- --nocapture --test-threads=1
        echo "::endgroup::"
        
        echo "::group::ðŸ”„ Running ACID Transaction Tests"
        cargo test --test acid_test --verbose -- --nocapture --test-threads=1
        echo "::endgroup::"
        
        echo "::group::ðŸ”— Running Integration Tests"
        cargo test --test integration_test --verbose -- --nocapture --test-threads=1
        echo "::endgroup::"
        
        echo "::group::ðŸ“š Running Documentation Tests"
        cargo test --doc --verbose -- --nocapture --test-threads=1
        echo "::endgroup::"
    
    - name: Build examples
      run: |
        cargo build --example quickstart
        cargo build --example memory_agent
        cargo build --example graph_relations
        cargo build --example multimodal_agent
    
    - name: Run doctests
      run: cargo test --doc

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install RocksDB dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev clang
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run security audit
      uses: rustsec/audit-check@v1
      with:
        token: ${{ secrets.GH_TOKEN }}

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install RocksDB dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev clang
    
    - name: Run benchmarks
      run: cargo bench --all-features -- --output-format bencher | tee output.txt
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: output.txt
        github-token: ${{ secrets.GH_TOKEN }}
        auto-push: true
